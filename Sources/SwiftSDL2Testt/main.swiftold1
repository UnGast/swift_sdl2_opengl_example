import CSDL2
import SDL
import Foundation
import CNuklear

var windowSize = (width: 600, height: 480)

func main() throws {
    
    var isRunning = true
    
    try SDL.initialize(subSystems: [.video])
    
    defer { SDL.quit() }
    
    var window = try SDLWindow(title: "SDLDemo",
                               frame: (x: .centered, y: .centered, width: windowSize.width, height: windowSize.height),
                               options: [.resizable, .shown, .opengl])

    withUnsafePointer(to: window) { nk_sdl_init(OpaquePointer($0)) }

    let context = try SDLGLContext(window: window)

    //glViewport(x: 0, y: 0, width: GL.Size(windowSize.width), height: GL.Size(windowSize.height))

    //let test = glCreateProgram()

    //print("ERROR?: ", glGetError())

    

    let framesPerSecond = try window.displayMode().refreshRate
    var frame = 0
    var lastFrameTime = SDL_GetTicks()
    var totalTime: UInt32 = 0
    var event = SDL_Event()
    var activeKeys = [
        SDL_Keycode(SDLK_DOWN): false,
        SDL_Keycode(SDLK_UP): false,
        SDL_Keycode(SDLK_LEFT): false,
        SDL_Keycode(SDLK_RIGHT): false
    ]

    while isRunning {
        SDL_PollEvent(&event)

        // increment ticker
        frame += 1
        let startTime = SDL_GetTicks()
        let ùö´time = startTime - lastFrameTime
        lastFrameTime = startTime
        totalTime += ùö´time
        let eventType = SDL_EventType(rawValue: event.type)
        
        switch eventType {
            case SDL_QUIT, SDL_APP_TERMINATING:
                isRunning = false
            case SDL_WINDOWEVENT:
                if event.window.event == UInt8(SDL_WINDOWEVENT_SIZE_CHANGED.rawValue) {
                    windowSize.width = Int(event.window.data1)
                    windowSize.height = Int(event.window.data2)
                    //glViewport(x: 0, y: 0, width: GL.Size(windowSize.width), height: GL.Size(windowSize.height)) //t(0, 0, windowSize.width, windowSize.height)
                    //updateProjectionMatrix()
                }
            case SDL_KEYDOWN:
                activeKeys[event.key.keysym.sym] = true
            case SDL_KEYUP:
                activeKeys[event.key.keysym.sym] = false
            default:
                break
        }
        
        

        CNuklear.glClearColor(0.2, 0.3, 0.3, 1.0)
        CNuklear.glClear(GL_COLOR_BUFFER_BIT)

        

        window.glSwap()

        let frameDuration = SDL_GetTicks() - startTime
        if frameDuration < 1000 / UInt32(framesPerSecond) {
           SDL_Delay((1000 / UInt32(framesPerSecond)) - frameDuration)
        }
    }
}

do { try main() }
catch let error as SDLError {
    print("Error: \(error.debugDescription)")
    exit(EXIT_FAILURE)
}
catch {
    print("Error: \(error)")
    exit(EXIT_FAILURE)
}